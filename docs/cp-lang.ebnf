(**
 * Author: Carlos Machado
 * Ref.: https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form
 *)

program               = [ namespace_def ] { program_statement }

namespace_def         = "namespace" identifier ";"

program_statement     = lib ";"
                      | as_namespace ";"
                      | function_decl
                      | statement

statement             = struct_decl ";"
                      | variable_decl ";"
                      | constant_decl ";"
                      | assignment ";"
                      | if_statement
                      | switch_statement
                      | while_statement
                      | for_statement
                      | foreach_statement
                      | do_while_statement ";"
                      | break_statement ";"
                      | continue_statement ";"
                      | return_statement ";"
                      | exit_statement ";"
                      | expression ";"

lib                   = "using" path_identifier

as_namespace          = "as" "namespace" identifier

block                 = "{" { statement } "}"

function_decl         = "fun" identifier "(" [ formal_params ] ")" [ ":" def_type ] block

struct_decl           = "struct" identifier "{" { formal_params } "}"

struct_vars           = struct_var { struct_var }

struct_var            = "var" identifier ":" type ";"

formal_params         = formal_param { "," formal_param }

formal_param          = var_identifier [ ":" type ]

while_statement       = "while" "(" expression ")" block

do_while_statement    = "do" block "while" "(" expression ")" ";"

for_statement         = "for" "(" [ expression ] ";" [ expression ] ";" [ expression ] ")" block

foreach_statement     = "foreach" "(" variable_decl "in" expression ")" block

if_statement          = if_def { elif_statement } [ else_statement ]

if_def                = "if" "(" expression ")" block

elif_statement        = "else" if_def

else_statement        = "else" block

switch_statement      = "switch" "(" expression ")" 

switch_block          = "{" { switch_case } [ switch_default ] "}"

switch_case           = "case" expression ":" case_block

switch_default        = "default" ":" case_block

case_block            = block | { statement }

return_statement      = "return" [ expression ]

variable_decl         = "var" var_identifier [ ":" type ] [ "=" expression ]

constant_decl         = "const" var_identifier [ ":" type ] "=" expression

assignment            = var_identifier "=" expression

expression            = simple_expression { relational_op simple_expression }

simple_expression     = term { additive_op term }

term                  = factor { multiplicative_op factor }

factor                = literal
                      | var_identifier
                      | function_call
                      | sub_expression
                      | unary

unary                 = ( "+" | "-" | "not" ) { expression }

sub_expression        = "(" expression ")"

function_call         = identifier "(" [actual_params] ")"

actual_params         = expression { "," expression }

relational_op         = "<" | ">" | "==" | "!=" | "<=" | ">="

additive_op           = "+" | "-" | "or"

multiplicative_op     = "*" | "/" | "%" | "and"

identifier            = ( "_" | letter ) { "_" | letter | digit }

var_identifier        = identifier [ array_def ]

expr_identifier       = path_identifier [ array_def ]

array_def             = "[" { int_literal } "]" { array_def }

path_identifier       = identifier { "." identifier }

literal               = bool_literal
                      | int_literal
                      | float_literal
                      | char_literal
                      | string_literal
                      | array_constructor
                      | struct_constructor
                      | null_literal

bool_literal          = "true" | "false"

int_literal           = digit { digit }

float_literal         = digit { digit } "." { digit } [ "f" ]
                      | "." digit { digit } [ "f" ]

char_literal          = "'" printable "'"

string_literal        = "\"" { printable } "\""

array_constructor     = "{" literal { "," literal } "}"

struct_constructor    = identifier "{" { "var" identifier ":" type { "," literal } } "}"

null_literal          = "null"

def_type              = type | "void"

type                  = "bool" | "int" | "float" | "char" | "string" | identifier

printable             = digit | letter  | " " | "!" | "\"" | "#" | "$"  | "%" | "&"
                      | "'" | "(" | ")" | "*" | "+" | ","  | "-" | "."  | "/" | ":"
                      | ";" | "<" | "=" | ">" | "?" | "@"  | "[" | "\\" | "]" | "^"
                      | "_" | "`" | "{" | "|" | "}" | "~"

letter                = "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K"
                      | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V"
                      | "W" | "X" | "Y" | "Z" | "a" | "b" | "c" | "d" | "e" | "f" | "g"
                      | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r"
                      | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z"

digit                 = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"