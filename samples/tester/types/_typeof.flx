include namespace bsl;

start_test("TYPE / TYPEOF / TYPE");

assert_equals("type of bool", "bool", typeof(bool));
assert_equals("type of int", "int", typeof(int));
assert_equals("type of float", "float", typeof(float));
assert_equals("type of char", "char", typeof(char));
assert_equals("type of string", "string", typeof(string));

end_test();

// start_test("TYPE / COMPLEX TYPE / VARIABLE");

// assert_true("is array", is_array());

// end_test();

start_test("TYPE / TYPEOF / VARIABLE / UNTYPED");

assert_equals("type of false boolean as undeclared any", typeof(false), typeof(dbf));
assert_equals("type of true boolean as undeclared any", typeof(true), typeof(dbt));
assert_equals("type of integer as undeclared any", typeof(666), typeof(di));
assert_equals("type of float as undeclared any", typeof(6.66), typeof(df));
assert_equals("type of char as undeclared any", typeof('c'), typeof(dc));
assert_equals("type of string as undeclared any", typeof("string"), typeof(ds));

end_test();

start_test("TYPE / TYPEOF / VARIABLE / TYPED");

assert_equals("type of false boolean as undeclared any", typeof(false), typeof(dubf));
assert_equals("type of true boolean as undeclared any", typeof(true), typeof(dubt));
assert_equals("type of integer as undeclared any", typeof(666), typeof(dui));
assert_equals("type of float as undeclared any", typeof(6.66), typeof(duf));
assert_equals("type of char as undeclared any", typeof('c'), typeof(duc));
assert_equals("type of string as undeclared any", typeof("string"), typeof(dus));

end_test();

