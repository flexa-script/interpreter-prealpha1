include namespace bsl;

start_test("DECLARATION / UNDEFINED / SIMPLE");

var us;
assert_true("declared as undeclared any", true);

var usa: any;
assert_true("declared as any", true);

var usb: bool;
assert_true("declared as bool", true);

var usi: int;
assert_true("declared as int", true);

var usf: float;
assert_true("declared as float", true);

var usc: char;
assert_true("declared as char", true);

var uss: string;
assert_true("declared as string", true);

end_test();


start_test("DECLARATION / UNDEFINED / ARRAY");

var ua1[3];
var ua2[3][3];
var ua3[3][3][3];
assert_true("declared 1, 2 and 3 dimension arrays as undeclared any", true);

var uaa1[3]: any;
var uaa2[3][3]: any;
var uaa3[3][3][3]: any;
assert_true("declared 1, 2 and 3 dimension arrays as any", true);

var uab1[3]: bool;
var uab2[3][3]: bool;
var uab3[3][3][3]: bool;
assert_true("declared 1, 2 and 3 dimension arrays as bool", true);

var uai1[3]: int;
var uai2[3][3]: int;
var uai3[3][3][3]: int;
assert_true("declared 1, 2 and 3 dimension arrays as int", true);

var uaf1[3]: float;
var uaf2[3][3]: float;
var uaf3[3][3][3]: float;
assert_true("declared 1, 2 and 3 dimension arrays as float", true);

var uac1[3]: char;
var uac2[3][3]: char;
var uac3[3][3][3]: char;
assert_true("declared 1, 2 and 3 dimension arrays as char", true);

var uas1[3]: string;
var uas2[3][3]: string;
var uas3[3][3][3]: string;
assert_true("declared 1, 2 and 3 dimension arrays as string", true);

end_test();


start_test("DECLARATION / UNDEFINED / STRUCT");

var ustr1: Foo;
assert_true("declared struct as Foo", true);

var ustr2: Bar;
assert_true("declared struct as Bar", true);

var ustra11[3]: Foo;
var ustra12[3][3]: Foo;
var ustra13[3][3][3]: Foo;
assert_true("declared 1, 2 and 3 dimension arrays as Foo", true);

var ustra21[3]: Bar;
var ustra22[3][3]: Bar;
var ustra23[3][3][3]: Bar;
assert_true("declared 1, 2 and 3 dimension arrays as Bar", true);

end_test();


start_test("DECLARATION / ASSIGNED / UNTYPED / SIMPLE");

var dbf = false;
assert_equals("false boolean as undeclared any", false, dbf);
var dbt = true;
assert_equals("true boolean as undeclared any", true, dbt);
var di = 666;
assert_equals("integer as undeclared any", 666, di);
var df = 6.66;
assert_equals("float as undeclared any", 6.66, df);
var dc = 'c';
assert_equals("char as undeclared any", 'c', dc);
var ds = "string";
assert_equals("string as undeclared any", "string", ds);

end_test();


start_test("DECLARATION / ASSIGNED / TYPED / SIMPLE");

var dubf: bool = false;
assert_equals("false boolean as undeclared any", false, dubf);
var dubt: bool = true;
assert_equals("true boolean as undeclared any", true, dubt);
var dui: int = 666;
assert_equals("integer as undeclared any", 666, dui);
var duf: float = 6.66;
assert_equals("float as undeclared any", 6.66, duf);
var duc: char = 'c';
assert_equals("char as undeclared any", 'c', duc);
var dus: string = "string";
assert_equals("string as undeclared any", "string", dus);

end_test();

