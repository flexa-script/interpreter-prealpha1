#ifndef TOKEN_HPP
#define TOKEN_HPP

#include <string>


namespace lexer {

	enum TokenType {
		TOK_BOOL_LITERAL,
		TOK_INT_LITERAL,
		TOK_FLOAT_LITERAL,
		TOK_CHAR_LITERAL,
		TOK_STRING_LITERAL,
		TOK_ADDITIVE_OP,
		TOK_ADDITIVE_UN_OP,
		TOK_MULTIPLICATIVE_OP,
		TOK_RELATIONAL_OP,
		TOK_EQUALITY_OP,
		TOK_LOGICAL_AND_OP,
		TOK_LOGICAL_OR_OP,
		TOK_NOT,
		TOK_VOID_TYPE,
		TOK_BOOL_TYPE,
		TOK_INT_TYPE,
		TOK_FLOAT_TYPE,
		TOK_CHAR_TYPE,
		TOK_STRING_TYPE,
		TOK_ANY_TYPE,
		TOK_FUNCTION_TYPE,
		TOK_TYPEOF,
		TOK_TYPEID,
		TOK_USING,
		TOK_ENUM,
		TOK_NAMESPACE,
		TOK_CONST,
		TOK_VAR,
		TOK_REF,
		TOK_UNREF,
		TOK_STRUCT,
		TOK_DEF,
		TOK_NULL,
		TOK_THIS,
		TOK_RETURN,
		TOK_CONTINUE,
		TOK_BREAK,
		TOK_EXIT,
		TOK_TRY,
		TOK_CATCH,
		TOK_THROW,
		TOK_SWITCH,
		TOK_CASE,
		TOK_DEFAULT,
		TOK_AS,
		TOK_IS,
		TOK_IN,
		TOK_IF,
		TOK_ELSE,
		TOK_FOR,
		TOK_FOREACH,
		TOK_WHILE,
		TOK_DO,
		TOK_IDENTIFIER,
		TOK_EQUALS,
		TOK_LIB_ACESSOR_OP,
		TOK_RETICENCES,
		TOK_LEFT_CURLY,
		TOK_RIGHT_CURLY,
		TOK_LEFT_BRACKET,
		TOK_RIGHT_BRACKET,
		TOK_LEFT_BRACE,
		TOK_RIGHT_BRACE,
		TOK_COMMA,
		TOK_DOT,
		TOK_SEMICOLON,
		TOK_COLON,
		TOK_QMARK,
		TOK_DSIGN,
		TOK_BITWISE_OR,
		TOK_BITWISE_XOR,
		TOK_BITWISE_AND,
		TOK_BITWISE_SHIFT,
		TOK_COMMENT,
		TOK_ERROR,
		TOK_EOF
	};

	const std::string TOKEN_IMAGE[] = {
		"bool literal",
		"int literal",
		"float literal",
		"char literal",
		"string literal",
		"additive operator",
		"unary additive operator",
		"multiplicative operator",
		"relational operator",
		"equality operator",
		"and",
		"or",
		"not",
		"void",
		"bool",
		"int",
		"float",
		"char",
		"string",
		"any",
		"function",
		"typeof",
		"typeid",
		"using",
		"enum",
		"namespace",
		"const",
		"var",
		"ref",
		"unref",
		"struct",
		"def",
		"null",
		"this",
		"return",
		"continue",
		"break",
		"exit",
		"try",
		"catch",
		"throw",
		"switch",
		"case",
		"default",
		"as",
		"is",
		"in",
		"if",
		"else",
		"for",
		"foreach",
		"while",
		"do",
		"identifier",
		"=",
		"::",
		"...",
		"{",
		"}",
		"(",
		")",
		"[",
		"]",
		",",
		".",
		";",
		":",
		"?",
		"$",
		"|",
		"^",
		"&",
		"shift",
		"commentary token",
		"error token",
		"EOF token"
	};

	class Token {
	public:
		TokenType type;
		std::string value;
		unsigned int row;
		unsigned int col;

		Token(TokenType type, const std::string& value, unsigned int row = 0, unsigned int col = 0);
		Token();

		static const std::string& token_image(TokenType type);
	};
};

#endif // !TOKEN_HPP
