#ifndef VMCONSTANTS_HPP
#define VMCONSTANTS_HPP

#include <cstdint>
#include <string>

enum OpCode : uint16_t {
	OP_RES,
	// namespace ops
	OP_POP_NAMESPACE,
	OP_PUSH_NAMESPACE,
	OP_PUSH_NAMESPACE_STACK,
	OP_INCLUDE_NAMESPACE,
	OP_EXCLUDE_NAMESPACE,
	// value ops
	OP_POP_CONSTANT,
	OP_PUSH_UNDEFINED,
	OP_PUSH_VOID,
	OP_PUSH_BOOL,
	OP_PUSH_INT,
	OP_PUSH_FLOAT,
	OP_PUSH_CHAR,
	OP_PUSH_STRING,
	OP_PUSH_FUNCTION,
	OP_CREATE_ARRAY,
	OP_SET_ELEMENT,
	OP_CREATE_STRUCT,
	OP_SET_FIELD,
	// struct type ops
	OP_STRUCT_START,
	OP_STRUCT_SET_VAR,
	OP_STRUCT_END,
	// type ops
	OP_SET_TYPE,
	OP_SET_TYPE_NAME,
	OP_SET_TYPE_NAME_SPACE,
	OP_SET_ARRAY_SIZE,
	OP_SET_DEFAULT_VALUE,
	OP_SET_IS_REST,
	// variable ops
	OP_SET_USE_REF, // todo: chek places to use (assign, expr, func param etc.)
	OP_LOAD_VAR,
	OP_STORE_VAR,
	OP_ASSIGN_VAR,
	OP_LOAD_SUB_ID,
	OP_LOAD_SUB_IX,
	OP_ASSIGN_SUB,
	// function ops
	OP_FUN_START,
	OP_FUN_SET_PARAM,
	OP_FUN_END,
	OP_CALL,
	OP_RETURN,
	// coditional
	OP_STORE_COMP,
	OP_RELEASE_COMP,
	OP_CONTINUE,
	OP_BREAK,
	OP_TRY_START,
	OP_TRY_END,
	OP_THROW,
	OP_GET_ITERATOR,
	OP_NEXT_ELEMENT,
	OP_JUMP,
	OP_JUMP_IF_FALSE,
	OP_JUMP_IF_FALSE_OR_NEXT,
	OP_JUMP_IF_TRUE,
	OP_JUMP_IF_TRUE_OR_NEXT,
	// expression ops
	OP_IS_TYPE,
	OP_REFID,
	OP_TYPEID,
	OP_TYPEOF,
	OP_TYPE_PARSE,
	OP_TERNARY,
	OP_IN,
	OP_OR,
	OP_AND,
	OP_BIT_OR,
	OP_BIT_XOR,
	OP_BIT_AND,
	OP_EQL,
	OP_DIF,
	OP_LT,
	OP_LTE,
	OP_GT,
	OP_GTE,
	OP_SPACE_SHIP,
	OP_LEFT_SHIFT,
	OP_RIGHT_SHIFT,
	OP_ADD,
	OP_SUB,
	OP_MUL,
	OP_DIV,
	OP_REMAINDER,
	OP_FLOOR_DIV,
	OP_NOT,
	OP_BIT_NOT,
	OP_EXP,
	OP_REF,
	OP_UNREF,
	OP_TRAP,
	OP_HALT,
	OP_ERROR = 0xFFFF
};

const std::string OP_NAMES[] = {
	"RES",
	// value ops
	"POP",
	"PUSH_UNDEFINED",
	"PUSH_VOID",
	"PUSH_BOOL",
	"PUSH_INT",
	"PUSH_FLOAT",
	"PUSH_CHAR",
	"PUSH_STRING",
	"PUSH_FUNCTION",
	"CREATE_ARRAY",
	"SET_ELEMENT",
	"CREATE_STRUCT",
	"SET_FIELD",
	// struct type ops
	"STRUCT_START",
	"STRUCT_SET_VAR",
	"STRUCT_END",
	// type ops
	"SET_TYPE",
	"SET_TYPE_NAME",
	"SET_NAME_SPACE",
	"SET_ARRAY_DIM",
	"SET_ARRAY_SIZE",
	// variable ops
	"SET_VAR_USE_REF",
	"LOAD_VAR",
	"STORE_VAR",
	"ASSIGN_VAR",
	"LOAD_SUB_ID",
	"LOAD_SUB_IX",
	"ASSIGN_SUB",
	// function ops
	"FUN_START",
	"FUN_PARAM_END",
	"FUN_END",
	"CALL",
	"RETURN",
	// coditional
	"CONTINUE",
	"BREAK",
	"TRY_START",
	"TRY_END",
	"THROW",
	"GET_ITERATOR",
	"NEXT_ELEMENT",
	"JUMP",
	"JUMP_IF_FALSE",
	"JUMP_IF_FALSE_OR_NEXT",
	"JUMP_IF_TRUE",
	"JUMP_IF_TRUE_OR_NEXT",
	// expression ops
	"IS_TYPE",
	"REFID",
	"TYPEID",
	"TYPEOF",
	"TYPE_PARSE",
	"TERNARY",
	"IN",
	"OR",
	"AND",
	"BIT_OR",
	"BIT_XOR",
	"BIT_AND",
	"EQL",
	"DIF",
	"LT",
	"LTE",
	"GT",
	"GTE",
	"SPACE_SHIP",
	"LEFT_SHIFT",
	"RIGHT_SHIFT",
	"ADD",
	"SUB",
	"MUL",
	"DIV",
	"REMAINDER",
	"FLOOR_DIV",
	"NOT",
	"BIT_NOT",
	"EXP",
	"REF",
	"UNREF",
	"TRAP",
	"HALT"
};

#endif // !VMCONSTANTS_HPP
