#ifndef VMCONSTANTS_HPP
#define VMCONSTANTS_HPP

#include <cstdint>
#include <string>
#include <unordered_map>

namespace vm {

	enum OpCode : uint16_t {
		OP_RES,
		// namespace ops
		OP_POP_NAMESPACE,
		OP_PUSH_NAMESPACE,
		OP_PUSH_NAMESPACE_STACK,
		OP_INCLUDE_NAMESPACE,
		OP_EXCLUDE_NAMESPACE,
		// value ops
		OP_POP_CONSTANT,
		OP_PUSH_UNDEFINED,
		OP_PUSH_VOID,
		OP_PUSH_BOOL,
		OP_PUSH_INT,
		OP_PUSH_FLOAT,
		OP_PUSH_CHAR,
		OP_PUSH_STRING,
		OP_PUSH_FUNCTION,
		OP_INIT_ARRAY,
		OP_SET_ELEMENT,
		OP_PUSH_ARRAY,
		OP_INIT_STRUCT,
		OP_SET_FIELD,
		OP_PUSH_STRUCT,
		// struct type ops
		OP_STRUCT_START,
		OP_STRUCT_SET_VAR,
		OP_STRUCT_END,
		// type ops
		OP_SET_TYPE,
		OP_SET_ARRAY_TYPE,
		OP_SET_TYPE_NAME,
		OP_SET_TYPE_NAME_SPACE,
		OP_SET_ARRAY_SIZE,
		OP_SET_DEFAULT_VALUE,
		OP_SET_IS_REST,
		// variable ops
		OP_LOAD_VAR,
		OP_STORE_VAR,
		OP_ASSIGN_VAR,
		OP_LOAD_SUB_ID,
		OP_LOAD_SUB_IX,
		OP_ASSIGN_SUB_ID,
		OP_ASSIGN_SUB_IX,
		// function ops
		OP_FUN_START,
		OP_FUN_SET_PARAM,
		OP_CALL_PARAM_COUNT,
		OP_FUN_END,
		OP_CALL,
		OP_RETURN,
		// coditional
		OP_STORE_COMP,
		OP_RELEASE_COMP,
		OP_CONTINUE,
		OP_BREAK,
		OP_TRY_START,
		OP_TRY_END,
		OP_THROW,
		OP_GET_ITERATOR,
		OP_NEXT_ELEMENT,
		OP_JUMP,
		OP_JUMP_IF_FALSE,
		OP_JUMP_IF_FALSE_OR_NEXT,
		OP_JUMP_IF_TRUE,
		OP_JUMP_IF_TRUE_OR_NEXT,
		// expression ops
		OP_IS_TYPE,
		OP_REFID,
		OP_TYPEID,
		OP_TYPEOF,
		OP_TYPE_PARSE,
		OP_TERNARY,
		OP_IN,
		OP_OR,
		OP_AND,
		OP_BIT_OR,
		OP_BIT_XOR,
		OP_BIT_AND,
		OP_EQL,
		OP_DIF,
		OP_LT,
		OP_LTE,
		OP_GT,
		OP_GTE,
		OP_SPACE_SHIP,
		OP_LEFT_SHIFT,
		OP_RIGHT_SHIFT,
		OP_ADD,
		OP_SUB,
		OP_MUL,
		OP_DIV,
		OP_REMAINDER,
		OP_FLOOR_DIV,
		OP_NOT,
		OP_BIT_NOT,
		OP_EXP,
		OP_REF,
		OP_UNREF,
		OP_TRAP,
		OP_HALT,
		OP_SIZE,
		OP_ERROR = 0xFFFF
	};

	const std::unordered_map<OpCode, std::string> OP_NAMES = {
		{OP_RES, "RES"},
		// namespace ops
		{OP_POP_NAMESPACE, "POP_NAMESPACE"},
		{OP_PUSH_NAMESPACE, "PUSH_NAMESPACE"},
		{OP_PUSH_NAMESPACE_STACK, "PUSH_NAMESPACE_STACK"},
		{OP_INCLUDE_NAMESPACE, "INCLUDE_NAMESPACE"},
		{OP_EXCLUDE_NAMESPACE, "EXCLUDE_NAMESPACE"},
		// value ops
		{OP_POP_CONSTANT, "POP_CONSTANT"},
		{OP_PUSH_UNDEFINED, "PUSH_UNDEFINED"},
		{OP_PUSH_VOID, "PUSH_VOID"},
		{OP_PUSH_BOOL, "PUSH_BOOL"},
		{OP_PUSH_INT, "PUSH_INT"},
		{OP_PUSH_FLOAT, "PUSH_FLOAT"},
		{OP_PUSH_CHAR, "PUSH_CHAR"},
		{OP_PUSH_STRING, "PUSH_STRING"},
		{OP_PUSH_FUNCTION, "PUSH_FUNCTION"},
		{OP_INIT_ARRAY, "CREATE_ARRAY"},
		{OP_SET_ELEMENT, "SET_ELEMENT"},
		{OP_PUSH_ARRAY, "PUSH_ARRAY"},
		{OP_INIT_STRUCT, "CREATE_STRUCT"},
		{OP_SET_FIELD, "SET_FIELD"},
		{OP_PUSH_STRUCT, "PUSH_STRUCT"},
		// struct type ops
		{OP_STRUCT_START, "STRUCT_START"},
		{OP_STRUCT_SET_VAR, "STRUCT_SET_VAR"},
		{OP_STRUCT_END, "STRUCT_END"},
		// type ops
		{OP_SET_TYPE, "SET_TYPE"},
		{OP_SET_ARRAY_TYPE, "SET_ARRAY_TYPE"},
		{OP_SET_TYPE_NAME, "SET_TYPE_NAME"},
		{OP_SET_TYPE_NAME_SPACE, "SET_NAME_SPACE"},
		{OP_SET_ARRAY_SIZE, "SET_ARRAY_SIZE"},
		{OP_SET_DEFAULT_VALUE, "SET_DEFAULT_VALUE"},
		{OP_SET_IS_REST, "SET_IS_REST"},
		// variable ops
		{OP_LOAD_VAR, "LOAD_VAR"},
		{OP_STORE_VAR, "STORE_VAR"},
		{OP_ASSIGN_VAR, "ASSIGN_VAR"},
		{OP_LOAD_SUB_ID, "LOAD_SUB_ID"},
		{OP_LOAD_SUB_IX, "LOAD_SUB_IX"},
		{OP_ASSIGN_SUB_ID, "ASSIGN_SUB_ID"},
		{OP_ASSIGN_SUB_IX, "ASSIGN_SUB_IX"},
		// function ops
		{OP_FUN_START, "FUN_START"},
		{OP_FUN_SET_PARAM, "FUN_PARAM_END"},
		{OP_CALL_PARAM_COUNT, "CALL_PARAM_COUNT"},
		{OP_FUN_END, "FUN_END"},
		{OP_CALL, "CALL"},
		{OP_RETURN, "RETURN"},
		// coditional
		{OP_STORE_COMP, "STORE_COMP"},
		{OP_RELEASE_COMP, "RELEASE_COMP"},
		{OP_CONTINUE, "CONTINUE"},
		{OP_BREAK, "BREAK"},
		{OP_TRY_START, "TRY_START"},
		{OP_TRY_END, "TRY_END"},
		{OP_THROW, "THROW"},
		{OP_GET_ITERATOR, "GET_ITERATOR"},
		{OP_NEXT_ELEMENT, "NEXT_ELEMENT"},
		{OP_JUMP, "JUMP"},
		{OP_JUMP_IF_FALSE, "JUMP_IF_FALSE"},
		{OP_JUMP_IF_FALSE_OR_NEXT, "JUMP_IF_FALSE_OR_NEXT"},
		{OP_JUMP_IF_TRUE, "JUMP_IF_TRUE"},
		{OP_JUMP_IF_TRUE_OR_NEXT, "JUMP_IF_TRUE_OR_NEXT"},
		// expression ops
		{OP_IS_TYPE, "IS_TYPE"},
		{OP_REFID, "REFID"},
		{OP_TYPEID, "TYPEID"},
		{OP_TYPEOF, "TYPEOF"},
		{OP_TYPE_PARSE, "TYPE_PARSE"},
		{OP_TERNARY, "TERNARY"},
		{OP_IN, "IN"},
		{OP_OR, "OR"},
		{OP_AND, "AND"},
		{OP_BIT_OR, "BIT_OR"},
		{OP_BIT_XOR, "BIT_XOR"},
		{OP_BIT_AND, "BIT_AND"},
		{OP_EQL, "EQL"},
		{OP_DIF, "DIF"},
		{OP_LT, "LT"},
		{OP_LTE, "LTE"},
		{OP_GT, "GT"},
		{OP_GTE, "GTE"},
		{OP_SPACE_SHIP, "SPACE_SHIP"},
		{OP_LEFT_SHIFT, "LEFT_SHIFT"},
		{OP_RIGHT_SHIFT, "RIGHT_SHIFT"},
		{OP_ADD, "ADD"},
		{OP_SUB, "SUB"},
		{OP_MUL, "MUL"},
		{OP_DIV, "DIV"},
		{OP_REMAINDER, "REMAINDER"},
		{OP_FLOOR_DIV, "FLOOR_DIV"},
		{OP_NOT, "NOT"},
		{OP_BIT_NOT, "BIT_NOT"},
		{OP_EXP, "EXP"},
		{OP_REF, "REF"},
		{OP_UNREF, "UNREF"},
		{OP_TRAP, "TRAP"},
		{OP_HALT, "HALT"},
		{OP_ERROR, "ERROR"}
	};

}

#endif // !VMCONSTANTS_HPP
