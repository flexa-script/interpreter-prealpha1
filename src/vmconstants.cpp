#include "vmconstants.hpp"

const std::array<std::string, OP_SIZE> OP_NAMES = std::array<std::string, OP_SIZE>{
	"RES",
		// namespace ops
		"POP_NAMESPACE",
		"PUSH_NAMESPACE",
		"PUSH_NAMESPACE_STACK",
		"INCLUDE_NAMESPACE",
		"EXCLUDE_NAMESPACE",
		// value ops
		"POP_CONSTANT",
		"PUSH_UNDEFINED",
		"PUSH_VOID",
		"PUSH_BOOL",
		"PUSH_INT",
		"PUSH_FLOAT",
		"PUSH_CHAR",
		"PUSH_STRING",
		"PUSH_FUNCTION",
		"CREATE_ARRAY",
		"SET_ELEMENT",
		"CREATE_STRUCT",
		"SET_FIELD",
		// struct type ops
		"STRUCT_START",
		"STRUCT_SET_VAR",
		"STRUCT_END",
		// type ops
		"SET_TYPE",
		"SET_ARRAY_TYPE",
		"SET_TYPE_NAME",
		"SET_NAME_SPACE",
		"SET_ARRAY_DIM",
		"SET_ARRAY_SIZE",
		// variable ops
		"SET_VAR_USE_REF",
		"LOAD_VAR",
		"STORE_VAR",
		"ASSIGN_VAR",
		"LOAD_SUB_ID",
		"LOAD_SUB_IX",
		"ASSIGN_SUB",
		// function ops
		"FUN_START",
		"FUN_PARAM_END",
		"CALL_PARAM_COUNT",
		"FUN_END",
		"CALL",
		"RETURN",
		// coditional
		"CONTINUE",
		"BREAK",
		"TRY_START",
		"TRY_END",
		"THROW",
		"GET_ITERATOR",
		"NEXT_ELEMENT",
		"JUMP",
		"JUMP_IF_FALSE",
		"JUMP_IF_FALSE_OR_NEXT",
		"JUMP_IF_TRUE",
		"JUMP_IF_TRUE_OR_NEXT",
		// expression ops
		"IS_TYPE",
		"REFID",
		"TYPEID",
		"TYPEOF",
		"TYPE_PARSE",
		"TERNARY",
		"IN",
		"OR",
		"AND",
		"BIT_OR",
		"BIT_XOR",
		"BIT_AND",
		"EQL",
		"DIF",
		"LT",
		"LTE",
		"GT",
		"GTE",
		"SPACE_SHIP",
		"LEFT_SHIFT",
		"RIGHT_SHIFT",
		"ADD",
		"SUB",
		"MUL",
		"DIV",
		"REMAINDER",
		"FLOOR_DIV",
		"NOT",
		"BIT_NOT",
		"EXP",
		"REF",
		"UNREF",
		"TRAP",
		"HALT"
};
