#ifndef VMCONSTANTS_HPP
#define VMCONSTANTS_HPP

#include <cstdint>
#include <string>
#include <array>

enum OpCode : uint16_t {
	OP_RES,
	// namespace ops
	OP_POP_NAMESPACE,
	OP_PUSH_NAMESPACE,
	OP_PUSH_NAMESPACE_STACK,
	OP_INCLUDE_NAMESPACE,
	OP_EXCLUDE_NAMESPACE,
	// value ops
	OP_POP_CONSTANT,
	OP_PUSH_UNDEFINED,
	OP_PUSH_VOID,
	OP_PUSH_BOOL,
	OP_PUSH_INT,
	OP_PUSH_FLOAT,
	OP_PUSH_CHAR,
	OP_PUSH_STRING,
	OP_PUSH_FUNCTION,
	OP_INIT_ARRAY,
	OP_SET_ELEMENT,
	OP_PUSH_ARRAY,
	OP_INIT_STRUCT,
	OP_SET_FIELD,
	OP_PUSH_STRUCT,
	// struct type ops
	OP_STRUCT_START,
	OP_STRUCT_SET_VAR,
	OP_STRUCT_END,
	// type ops
	OP_SET_TYPE,
	OP_SET_ARRAY_TYPE,
	OP_SET_TYPE_NAME,
	OP_SET_TYPE_NAME_SPACE,
	OP_SET_ARRAY_SIZE,
	OP_SET_DEFAULT_VALUE,
	OP_SET_IS_REST,
	// variable ops
	OP_SET_USE_REF, // todo: chek places to use (assign, expr, func param etc.)
	OP_LOAD_VAR,
	OP_STORE_VAR,
	OP_LOAD_SUB_ID,
	OP_LOAD_SUB_IX,
	OP_ASSIGN,
	// function ops
	OP_FUN_START,
	OP_FUN_SET_PARAM,
	OP_CALL_PARAM_COUNT,
	OP_FUN_END,
	OP_CALL,
	OP_RETURN,
	// coditional
	OP_STORE_COMP,
	OP_RELEASE_COMP,
	OP_CONTINUE,
	OP_BREAK,
	OP_TRY_START,
	OP_TRY_END,
	OP_THROW,
	OP_GET_ITERATOR,
	OP_NEXT_ELEMENT,
	OP_JUMP,
	OP_JUMP_IF_FALSE,
	OP_JUMP_IF_FALSE_OR_NEXT,
	OP_JUMP_IF_TRUE,
	OP_JUMP_IF_TRUE_OR_NEXT,
	// expression ops
	OP_IS_TYPE,
	OP_REFID,
	OP_TYPEID,
	OP_TYPEOF,
	OP_TYPE_PARSE,
	OP_TERNARY,
	OP_IN,
	OP_OR,
	OP_AND,
	OP_BIT_OR,
	OP_BIT_XOR,
	OP_BIT_AND,
	OP_EQL,
	OP_DIF,
	OP_LT,
	OP_LTE,
	OP_GT,
	OP_GTE,
	OP_SPACE_SHIP,
	OP_LEFT_SHIFT,
	OP_RIGHT_SHIFT,
	OP_ADD,
	OP_SUB,
	OP_MUL,
	OP_DIV,
	OP_REMAINDER,
	OP_FLOOR_DIV,
	OP_NOT,
	OP_BIT_NOT,
	OP_EXP,
	OP_REF,
	OP_UNREF,
	OP_TRAP,
	OP_HALT,
	OP_SIZE,
	OP_ERROR = 0xFFFF
};

extern const std::array<std::string, OP_SIZE> OP_NAMES;

#endif // !VMCONSTANTS_HPP
